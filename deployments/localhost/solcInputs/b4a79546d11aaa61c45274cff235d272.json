{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\nerror FundMe_notOwner();\n\ncontract FundMe {\n    address public i_ownerAddress;\n    uint256 public MINIMUM_USD = 50 * 1e18;\n    address[] public fundersAddressArray;\n\n    using PriceConverter for uint256;\n\n    mapping(address => uint) public getAmtPerFunder;\n\n    AggregatorV3Interface public priceFeed;\n\n    modifier onlyOwner() {\n        if (msg.sender != i_ownerAddress) {\n            revert FundMe_notOwner();\n        } else {\n            _;\n        }\n    }\n\n    constructor(address PriceFeedAddress) {\n        i_ownerAddress = msg.sender;\n        priceFeed = AggregatorV3Interface(PriceFeedAddress);\n    }\n\n    function fundWallet() public payable {\n        require(\n            msg.value.getCoversionRate(priceFeed) >= MINIMUM_USD,\n            \"Send $50 eth, atleast\"\n        );\n        fundersAddressArray.push(msg.sender);\n        getAmtPerFunder[msg.sender] = msg.value;\n    }\n\n    function withdrawBalance() public onlyOwner {\n        (bool withdrawSuccessful, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(\n            withdrawSuccessful,\n            \"Funds Not Transferred or you are not the owner\"\n        );\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < fundersAddressArray.length;\n            funderIndex++\n        ) {\n            address eachFundersArray = fundersAddressArray[funderIndex];\n            getAmtPerFunder[eachFundersArray] = 0;\n        }\n        fundersAddressArray = new address[](0);\n    }\n\n    receive() external payable {\n        fundWallet();\n    }\n\n    fallback() external payable {\n        fundWallet();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPriceFeed(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n        return uint256(answer * 1e18);\n    }\n\n    function getCoversionRate(\n        uint256 ethInputtedAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPriceFeed(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethInputtedAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}